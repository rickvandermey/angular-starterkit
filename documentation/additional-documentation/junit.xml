<?xml version="1.0"?>
<testsuite name="Chrome Headless 91.0.4469.0 (Mac OS 10.15.7)" package="" timestamp="2021-04-22T11:26:03" id="0" hostname="Ricks-MacBook-Pro.local" tests="72" errors="0" failures="0" time="0.972">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/91.0.4469.0 Safari/537.36"/>
  </properties>
  <testcase name="Selectors: application selector should return isMakingRequest status of application state" time="0.14" classname="Selectors: application selector"/>
  <testcase name="Routes: CustomSerializer should return route and query params" time="0.015" classname="Routes: CustomSerializer"/>
  <testcase name="Routes: CustomSerializer should return only URL" time="0.01" classname="Routes: CustomSerializer"/>
  <testcase name="Actions: Application Actions should update the Application action" time="0.013" classname="Actions: Application Actions"/>
  <testcase name="Components: App Component should have an Router Language subscription in mutableSubscriptions" time="0.074" classname="Components: App Component"/>
  <testcase name="Pages: Home page should create the homePage" time="0.034" classname="Pages: Home page"/>
  <testcase name="Reducers: Application reducer should return default state" time="0.008" classname="Reducers: Application reducer"/>
  <testcase name="Reducers: Application reducer should set isPendingRequest to true" time="0.008" classname="Reducers: Application reducer"/>
  <testcase name="Reducers: Notifications Reducer loadNotificationsSuccess should add notification" time="0.009" classname="Reducers: Notifications Reducer loadNotificationsSuccess"/>
  <testcase name="Reducers: Notifications Reducer addNotificationSuccess should add a new notification" time="0.009" classname="Reducers: Notifications Reducer addNotificationSuccess"/>
  <testcase name="Reducers: Notifications Reducer clearNotifications should remove all the ids" time="0.005" classname="Reducers: Notifications Reducer clearNotifications"/>
  <testcase name="Reducers: Notifications Reducer clearNotifications should clear all the entities" time="0.006" classname="Reducers: Notifications Reducer clearNotifications"/>
  <testcase name="Service: Manual service #sendNotification should return 200" time="0.012" classname="Service: Manual service #sendNotification"/>
  <testcase name="Service: Manual service #loadNotifications should return 200" time="0.005" classname="Service: Manual service #loadNotifications"/>
  <testcase name="Service: Manual service #sendSubscriptionToTheServer should return 200" time="0.006" classname="Service: Manual service #sendSubscriptionToTheServer"/>
  <testcase name="Pages: Error page should create the errorPage" time="0.053" classname="Pages: Error page"/>
  <testcase name="Pages: Error page navigate to a wrong url takes you to /404" time="0.038" classname="Pages: Error page"/>
  <testcase name="Reducers: Dummy reducer should not load dummy" time="0.006" classname="Reducers: Dummy reducer"/>
  <testcase name="Reducers: Dummy reducer should load dummy" time="0.009" classname="Reducers: Dummy reducer"/>
  <testcase name="Reducers: Dummy reducer should return default state" time="0.008" classname="Reducers: Dummy reducer"/>
  <testcase name="Reducers: Dummy reducer should load dummy successfully" time="0.007" classname="Reducers: Dummy reducer"/>
  <testcase name="Reducers: Dummy reducer should clear the error" time="0.021" classname="Reducers: Dummy reducer"/>
  <testcase name="Actions: Dummy Actions should create an action LoadFail" time="0.009" classname="Actions: Dummy Actions"/>
  <testcase name="Actions: Dummy Actions should create an action LoadSuccess" time="0.008" classname="Actions: Dummy Actions"/>
  <testcase name="Actions: Dummy Actions should create an action ClearError" time="0.003" classname="Actions: Dummy Actions"/>
  <testcase name="Actions: Dummy Actions should create an action Load" time="0.005" classname="Actions: Dummy Actions"/>
  <testcase name="Selectors: Router selector should return the selected Language from routerState" time="0.022" classname="Selectors: Router selector"/>
  <testcase name="Selectors: Router selector should return current RouterStateUrl" time="0.007" classname="Selectors: Router selector"/>
  <testcase name="Router Actions Go action should create an action" time="0.012" classname="Router Actions Go action"/>
  <testcase name="Router Actions Forward action should create an action" time="0.011" classname="Router Actions Forward action"/>
  <testcase name="Router Actions Back action should create an action" time="0.011" classname="Router Actions Back action"/>
  <testcase name="Effects: Dummy effects getDummyData should dispatch action when failed" time="0.026" classname="Effects: Dummy effects getDummyData"/>
  <testcase name="Effects: Dummy effects getDummyData should dispatch action on load" time="0.008" classname="Effects: Dummy effects getDummyData"/>
  <testcase name="Routes: LanguageGuard should not pass the LanguageGuard" time="0.012" classname="Routes: LanguageGuard"/>
  <testcase name="Routes: LanguageGuard should pass the LanguageGuard" time="0.017" classname="Routes: LanguageGuard"/>
  <testcase name="storage meta reducer should save configured key" time="0.007" classname="storage meta reducer"/>
  <testcase name="storage meta reducer should merge the saved state with the initial state and override the initial state value" time="0.015" classname="storage meta reducer"/>
  <testcase name="storage meta reducer should simply return the state" time="0.009" classname="storage meta reducer"/>
  <testcase name="storage meta reducer should return the saved state" time="0.007" classname="storage meta reducer"/>
  <testcase name="UniversalInterceptor without serverUrl should handle serverRequest if serverUrl is injected" time="0.014" classname="UniversalInterceptor without serverUrl"/>
  <testcase name="Helpers: Table helper dateSort should sort the array" time="0.004" classname="Helpers: Table helper dateSort"/>
  <testcase name="Helpers: Table helper sort should sort the array" time="0.006" classname="Helpers: Table helper sort"/>
  <testcase name="Helpers: Table helper flattensObject should sort the array" time="0.006" classname="Helpers: Table helper flattensObject"/>
  <testcase name="Selectors: Notifications selectors should return all Notifications as an array" time="0.018" classname="Selectors: Notifications selectors"/>
  <testcase name="Selectors: dummy selector should return the error" time="0.007" classname="Selectors: dummy selector"/>
  <testcase name="Selectors: dummy selector should return dummy image" time="0.009" classname="Selectors: dummy selector"/>
  <testcase name="Selectors: dummy selector should return dummy Currency" time="0.008" classname="Selectors: dummy selector"/>
  <testcase name="Selectors: dummy selector should return dummy email" time="0.009" classname="Selectors: dummy selector"/>
  <testcase name="Selectors: dummy selector should return dummy name" time="0.009" classname="Selectors: dummy selector"/>
  <testcase name="Selectors: dummy selector should return isLoading" time="0.007" classname="Selectors: dummy selector"/>
  <testcase name="Selectors: dummy selector should return isLoadingSuccessfully" time="0.007" classname="Selectors: dummy selector"/>
  <testcase name="Selectors: dummy selector should return dummy address" time="0.011" classname="Selectors: dummy selector"/>
  <testcase name="Selectors: dummy selector should return dummyEntity" time="0.009" classname="Selectors: dummy selector"/>
  <testcase name="Selectors: dummy selector should return dummy address" time="0.01" classname="Selectors: dummy selector"/>
  <testcase name="UniversalInterceptor with serverUrl should handle serverRequest if serverUrl is injected" time="0.008" classname="UniversalInterceptor with serverUrl"/>
  <testcase name="Effects: Router effects Go should not dispatch" time="0.016" classname="Effects: Router effects Go"/>
  <testcase name="Effects: Router effects Go should navigate to provided path" time="0.009" classname="Effects: Router effects Go"/>
  <testcase name="Effects: Router effects Forward should navigate to back" time="0.008" classname="Effects: Router effects Forward"/>
  <testcase name="Effects: Router effects Forward should not dispatch" time="0.01" classname="Effects: Router effects Forward"/>
  <testcase name="Effects: Router effects Back should not dispatch" time="0.01" classname="Effects: Router effects Back"/>
  <testcase name="Effects: Router effects Back should navigate to forward" time="0.008" classname="Effects: Router effects Back"/>
  <testcase name="Service: Dummy service #getDummyData should return expected Dummy" time="0.005" classname="Service: Dummy service #getDummyData"/>
  <testcase name="AppHttpInterceptor should dispatch an action to set isPendingRequest status" time="0.007" classname="AppHttpInterceptor"/>
  <testcase name="GoogleAnalyticsEffects should call google analytics when platform is not Browser" time="0.005" classname="GoogleAnalyticsEffects"/>
  <testcase name="GoogleAnalyticsEffects should call google analytics when platform is Browser" time="0.006" classname="GoogleAnalyticsEffects"/>
  <testcase name="GoogleAnalyticsEffects should not dispatch action" time="0.009" classname="GoogleAnalyticsEffects"/>
  <testcase name="Actions: Notifications Actions should create an action loadNotifications" time="0.012" classname="Actions: Notifications Actions"/>
  <testcase name="Actions: Notifications Actions should create an action clearNotifications" time="0.005" classname="Actions: Notifications Actions"/>
  <testcase name="Actions: Notifications Actions should create an action addNotification" time="0.013" classname="Actions: Notifications Actions"/>
  <testcase name="Actions: Notifications Actions should create an action sendNotification" time="0.007" classname="Actions: Notifications Actions"/>
  <testcase name="Actions: Notifications Actions should create an action loadNotificationsSuccess" time="0.009" classname="Actions: Notifications Actions"/>
  <testcase name="Actions: Notifications Actions should create an action loadNotificationsFail" time="0.006" classname="Actions: Notifications Actions"/>
  <system-out>
    <![CDATA[
]]>
  </system-out>
  <system-err/>
</testsuite>